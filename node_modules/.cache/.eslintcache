[{"/Users/cherielampley/Documents/GitHub/tic-tac-toe/my-app/src/index.js":"1"},{"size":3056,"mtime":1652903542424,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"7"},"18td9f3","/Users/cherielampley/Documents/GitHub/tic-tac-toe/my-app/src/index.js",["8","9","10"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" \n        onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n  \n  class Board extends React.Component {\n    renderSquare(i) {\n      return ( \n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)} \n            />\n            );  \n    }\n    render() {\n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n        };\n    }\n    handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = this.state.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const winner = calculateWinner(current.squares);\n            let status;\n            if (winner) {\n                status = 'Winner: ' + winner;\n            } else {\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : '0');\n            }\n\n        return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n  root.render(<Game />);\n  \n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }",{"ruleId":"11","severity":2,"message":"12","line":26,"column":36,"nodeType":"13","messageId":"14","endLine":26,"endColumn":42},{"ruleId":"15","severity":1,"message":"16","line":59,"column":15,"nodeType":"13","messageId":"17","endLine":59,"endColumn":22},{"ruleId":"15","severity":1,"message":"18","line":80,"column":17,"nodeType":"13","messageId":"17","endLine":80,"endColumn":23},"no-restricted-globals","Unexpected use of 'status'.","Identifier","defaultMessage","no-unused-vars","'current' is assigned a value but never used.","unusedVar","'status' is assigned a value but never used."]